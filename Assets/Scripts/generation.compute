#pragma kernel CSMain


struct Triangle
{
    float3 positions[3];
    float3 normals[3];
};

AppendStructuredBuffer<Triangle> vertices;
RWStructuredBuffer<int> counter;

int gridSize; // gridSize will be passed from the C# script


[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Ensure that we don't go outside the grid bounds
    if (id.x < gridSize - 1 && id.y < gridSize - 1)
    {
        // Calculate the base position of the current grid cell (top-left corner)
        float3 position1 = float3(id.x * 0.1f, id.y * 0.1f, 0.0f);
        float3 position2 = float3((id.x + 1) * 0.1f, id.y * 0.1f, 0.0f);
        float3 position3 = float3(id.x * 0.1f, (id.y + 1) * 0.1f, 0.0f);
        float3 position4 = float3((id.x + 1) * 0.1f, (id.y + 1) * 0.1f, 0.0f);

        float3 normal = float3(0.0f, 0.0f, 1.0f);
        
        Triangle tri1;
        tri1.positions[0] = position1;
        tri1.positions[1] = position3;
        tri1.positions[2] = position2;

        tri1.normals[0] = normal;
        tri1.normals[1] = normal;
        tri1.normals[2] = normal;

        vertices.Append(tri1);
        Triangle tri2;
        tri2.positions[0] = position2;
        tri2.positions[1] = position3;
        tri2.positions[2] = position4;

        tri2.normals[0] = normal;
        tri2.normals[1] = normal;
        tri2.normals[2] = normal;
        vertices.Append(tri2);
        InterlockedAdd(counter[0], 6);
    }
}
